import logging
import requests
import re
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, MessageHandler, ContextTypes, filters

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

TOKEN = "–í–ê–®_TELEGRAM_BOT_TOKEN"

JIKAN_URL = "https://api.jikan.moe/v4"
ADULT_KEYWORDS = ['''Your bad words list''']
ADULT_GENRES = {'''Your forbiden genres'''}

def contains_adult_keywords(text: str) -> bool:
    if not text:
        return False
    t = text.lower()
    for pat in ADULT_KEYWORDS:
        if re.search(pat, t):
            return True
    return False

def is_adult_content(anime: dict) -> bool:
    genres = anime.get("genres", []) or anime.get("demographics", []) or []
    for g in genres:
        name = g.get("name") if isinstance(g, dict) else str(g)
        if name and name in ADULT_GENRES:
            return True

    synopsis = anime.get("synopsis") or ""
    if contains_adult_keywords(synopsis):
        return True

    rating = (anime.get("rating") or "").lower()
    if "rx" in rating or "hentai" in rating:
        return True

    return False

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –∞–Ω–∏–º–µ-–±–æ—Ç ü§ñ\n\n"
        "–Ø –º–æ–≥—É –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–Ω–∏–º–µ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é.\n"
        "–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∞–Ω–∏–º–µ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—á–µ—à—å –Ω–∞–π—Ç–∏!\n\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: Naruto, Attack on Titan, One Piece –∏ —Ç.–¥."
    )

def search_anime(query):
    try:
        response = requests.get(f"{JIKAN_URL}/anime", params={"q": query, "limit": 5}, timeout=10)
        response.raise_for_status()
        return response.json().get("data", [])
    except requests.exceptions.RequestException as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ API: {e}")
        return None

def get_anime_details(anime_id):
    try:
        response = requests.get(f"{JIKAN_URL}/anime/{anime_id}/full", timeout=10)
        response.raise_for_status()
        return response.json().get("data")
    except requests.exceptions.RequestException as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –¥–µ—Ç–∞–ª–µ–π –∞–Ω–∏–º–µ: {e}")
        return None

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.message.text
    if len(query) < 3:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∞–Ω–∏–º–µ –¥–ª–∏–Ω–Ω–µ–µ 2 —Å–∏–º–≤–æ–ª–æ–≤.")
        return

    await update.message.reply_text("üîç –ò—â—É –∞–Ω–∏–º–µ...")

    results = search_anime(query)

    if results is None:
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –≤–Ω–µ—à–Ω–µ–≥–æ —Å–µ—Ä–≤–∏—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    if not results:
        await update.message.reply_text("–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ üò¢ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ.")
        return

    if len(results) == 1:
        await send_anime_details(update, context, results[0]['mal_id'])
    else:
        keyboard = []
        for anime in results:
            title = anime.get('title') or "Unknown"
            year = anime.get('year') or 'N/A'
            keyboard.append([InlineKeyboardButton(
                f"{title} ({year})",
                callback_data=f"anime_{anime['mal_id']}"
            )])

        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text(
            "–í–æ—Ç —á—Ç–æ —è –Ω–∞—à—ë–ª. –í—ã–±–µ—Ä–∏—Ç–µ –∞–Ω–∏–º–µ:",
            reply_markup=reply_markup
        )

async def send_anime_details(update: Update, context: ContextTypes.DEFAULT_TYPE, anime_id):
    anime = get_anime_details(anime_id)

    if not anime:
        if update and getattr(update, "effective_chat", None):
            await context.bot.send_message(chat_id=update.effective_chat.id, text="–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–Ω–∏–º–µ üò¢")
        else:
            logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: –Ω–µ—Ç chat_id")
        return

    adult = is_adult_content(anime)

    title = anime.get('title') or "Unknown"
    title_jp = anime.get('title_japanese')
    typ = anime.get('type') or 'N/A'
    year = anime.get('year') or 'N/A'
    episodes = anime.get('episodes') or 'N/A'
    score = anime.get('score') or 'N/A'
    status = anime.get('status') or 'N/A'

    message = f"üéå <b>{title}</b>\n\n"
    if title_jp:
        message += f"üáØüáµ <i>{title_jp}</i>\n\n"

    message += f"üì∫ <b>–¢–∏–ø:</b> {typ}\n"
    message += f"üìÖ <b>–ì–æ–¥:</b> {year}\n"
    message += f"üìä <b>–≠–ø–∏–∑–æ–¥—ã:</b> {episodes}\n"
    message += f"‚≠ê <b>–†–µ–π—Ç–∏–Ω–≥:</b> {score}/10\n"
    message += f"üë• <b>–°—Ç–∞—Ç—É—Å:</b> {status}\n\n"

    if adult:
        message += "‚ö†Ô∏è <b>–í–æ–∑—Ä–∞—Å—Ç–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç (18+)</b>\n"
        message += "üìñ –û–ø–∏—Å–∞–Ω–∏–µ —Å–∫—Ä—ã—Ç–æ, —Ç–∞–∫ –∫–∞–∫ —Å–æ–¥–µ—Ä–∂–∏—Ç –º–∞—Ç–µ—Ä–∏–∞–ª—ã –¥–ª—è –≤–∑—Ä–æ—Å–ª—ã—Ö –∏–ª–∏ –æ–ø–∏—Å–∞–Ω–∏—è, " \
                   "–∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –±—ã—Ç—å –Ω–µ—Å–æ–≤–º–µ—Å—Ç–∏–º—ã —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã.\n\n"
    else:
        synopsis = anime.get('synopsis') or '–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'
        if len(synopsis) > 1000:
            synopsis = synopsis[:1000] + "..."
        synopsis = re.sub(r"<[^>]+>", "", synopsis)
        message += f"üìñ <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b>\n{synopsis}\n\n"

    message += f"üîó <b>–°—Å—ã–ª–∫–∞ –Ω–∞ MyAnimeList:</b>\nhttps://myanimelist.net/anime/{anime_id}"

    chat_id = update.effective_chat.id if update and getattr(update, "effective_chat", None) else None
    if not chat_id:
        logger.error("–ù–µ –º–æ–≥—É –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å chat_id –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è")
        return

    try:
        if not adult and anime.get('images') and anime['images'].get('jpg') and anime['images']['jpg'].get('image_url'):
            image_url = anime['images']['jpg']['image_url']
            await context.bot.send_photo(chat_id=chat_id, photo=image_url, caption=message, parse_mode='HTML')
        else:
            await context.bot.send_message(chat_id=chat_id, text=message, parse_mode='HTML', disable_web_page_preview=True)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–µ—Ç–∞–ª–µ–π: {e}")
        try:
            await context.bot.send_message(chat_id=chat_id, text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        except Exception as e2:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {e2}")

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data or ""
    if data.startswith('anime_'):
        try:
            anime_id = int(data.split('_')[1])
        except Exception:
            await query.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∞–Ω–∏–º–µ.")
            return
        await send_anime_details(update, context, anime_id)

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "ü§ñ <b>–ê–Ω–∏–º–µ-–±–æ—Ç –ü–æ–º–æ—â—å</b>\n\n"
        "–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∞–Ω–∏–º–µ, –∏ —è –Ω–∞–π–¥—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω—ë–º!\n\n"
        "–ü—Ä–∏–º–µ—Ä—ã –∑–∞–ø—Ä–æ—Å–æ–≤:\n"
        "- Naruto\n"
        "- Attack on Titan\n"
        "- One Piece\n\n"
        "–Ø –ø–æ–∫–∞–∂—É –≤–∞–º –æ–ø–∏—Å–∞–Ω–∏–µ, —Ä–µ–π—Ç–∏–Ω–≥, –≥–æ–¥ –≤—ã–ø—É—Å–∫–∞ –∏ —Å—Å—ã–ª–∫—É –Ω–∞ MyAnimeList!\n\n"
        "–ï—Å–ª–∏ —Ç–∞–π—Ç–ª —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–æ–Ω—Ç–µ–Ω—Ç 18+, –æ–ø–∏—Å–∞–Ω–∏–µ –±—É–¥–µ—Ç —Å–∫—Ä—ã—Ç–æ.",
        parse_mode='HTML'
    )

async def random_anime(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        response = requests.get(f"{JIKAN_URL}/random/anime", timeout=10)
        response.raise_for_status()
        anime = response.json().get('data')
        if anime:
            await send_anime_details(update, context, anime['mal_id'])
        else:
            await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ª—É—á–∞–π–Ω–æ–µ –∞–Ω–∏–º–µ üò¢")
    except requests.exceptions.RequestException as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ —Å–ª—É—á–∞–π–Ω–æ–≥–æ –∞–Ω–∏–º–µ: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Å–ª—É—á–∞–π–Ω–æ–≥–æ –∞–Ω–∏–º–µ.")

async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.error(msg="–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:", exc_info=context.error)
    try:
        if update and getattr(update, "effective_chat", None):
            await context.bot.send_message(chat_id=update.effective_chat.id, text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ: {e}")

def main():
    application = Application.builder().token(TOKEN).build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("random", random_anime))
    application.add_handler(CallbackQueryHandler(button_handler))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    application.add_error_handler(error_handler)

    application.run_polling()

if __name__ == '__main__':
    main()
